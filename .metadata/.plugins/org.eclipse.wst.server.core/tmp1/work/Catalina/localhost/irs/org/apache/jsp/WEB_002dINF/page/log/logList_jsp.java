/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2019-11-26 05:56:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.page.log;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class logList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/E:/企业级实训/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/irs/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1533017074000L));
    _jspx_dependants.put("/WEB-INF/page/include/taglib.jsp", Long.valueOf(1533017074000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"utf-8\">\r\n");
      out.write("\t<title>用户列表</title>\r\n");
      out.write("\t<meta name=\"renderer\" content=\"webkit\">\r\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\r\n");
      out.write("\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\r\n");
      out.write("\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n");
      out.write("\t<meta name=\"format-detection\" content=\"telephone=no\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/layui/css/layui.css\" media=\"all\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/font_eolqem241z66flxr.css\" media=\"all\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/list.css\" media=\"all\" />\r\n");
      out.write("\t<script>  \r\n");
      out.write("        var ctx = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";  \r\n");
      out.write("    </script> \r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"childrenBody\">\r\n");
      out.write("\t<blockquote class=\"layui-elem-quote news_search\">\r\n");
      out.write("\t\t<form  class=\"layui-form\">\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"layui-inline\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"operation\" class=\"layui-input userName\"\r\n");
      out.write("\t\t\t\t\tname=\"operation\" placeholder=\"请输入需要查询的操作\" value=\"\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"layui-inline\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"createTimeStart\" class=\"layui-input userName\"\r\n");
      out.write("\t\t\t\t\tname=\"createTimeStart\" placeholder=\"操作时间(开始)\" value=\"\">\r\n");
      out.write("\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t<div class=\"layui-inline\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"createTimeEnd\" class=\"layui-input userName\"\r\n");
      out.write("\t\t\t\t\tname=\"createTimeEnd\" placeholder=\"操作时间(结束)\" value=\"\">\r\n");
      out.write("\t\t\t</div>\t\r\n");
      out.write("\t\t\t<a class=\"layui-btn search_btn\" lay-submit=\"\" data-type=\"search\" lay-filter=\"search\">查询</a>\r\n");
      out.write("\t\t\t<div class=\"layui-inline\">\r\n");
      out.write("\t\t\t\t（支持模糊查询）\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t</blockquote>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<div class=\"layui-form\">\r\n");
      out.write("\t  \t<table id=\"logList\" lay-filter=\"logList\"></table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/layui/layui.js\"></script>\r\n");
      out.write("\t<script type=\"text/html\" id=\"sexTpl\">\r\n");
      out.write(" \t\t {{#  if(d.sex === '0'){ }}\r\n");
      out.write("   \t\t <span style=\"color: #F581B1;\">女</span>\r\n");
      out.write("  \t\t{{#  } else if(d.sex === '1'){ }}\r\n");
      out.write("   \t\t \t男\r\n");
      out.write("\t\t{{#  } else{ }}\r\n");
      out.write("   \t\t \t保密\r\n");
      out.write("  \t\t{{#  } }}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tlayui.config({\r\n");
      out.write("\t\tbase : \"js/\"\r\n");
      out.write("\t}).use(['form','layer','jquery','table','laydate'],function(){\r\n");
      out.write("\t\tvar form = layui.form,table = layui.table,\r\n");
      out.write("\t\t\tlayer = parent.layer === undefined ? layui.layer : parent.layer,laydate = layui.laydate\r\n");
      out.write("\t\t\t$ = layui.jquery,\r\n");
      out.write("\t\t\tnowTime = new Date().valueOf(),max = null, active = {\r\n");
      out.write("\t\t\t\tsearch: function(){\r\n");
      out.write("\t\t\t        var operation=$(\"#operation\"),createTimeStart=$(\"#createTimeStart\"),createTimeEnd=$(\"#createTimeEnd\");\r\n");
      out.write("\t\t\t        //执行重载\r\n");
      out.write("\t\t\t        table.reload('logList', {\r\n");
      out.write("\t\t\t          page: {\r\n");
      out.write("\t\t\t            curr: 1 //重新从第 1 页开始\r\n");
      out.write("\t\t\t          }\r\n");
      out.write("\t\t\t          ,where: {\r\n");
      out.write("\t\t\t            //key: {\r\n");
      out.write("\t\t\t              operation:operation.val(),\r\n");
      out.write("\t\t\t              createTimeStart:createTimeStart.val(),\r\n");
      out.write("\t\t\t              createTimeEnd:createTimeEnd.val()\r\n");
      out.write("\t\t\t            //}\r\n");
      out.write("\t\t\t          }\r\n");
      out.write("\t\t\t        });\r\n");
      out.write("\t\t\t      }\r\n");
      out.write("\t\t\t    };\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\tvar start = laydate.render({\r\n");
      out.write("\t        elem: '#createTimeStart',\r\n");
      out.write("\t        type: 'datetime',\r\n");
      out.write("\t        max: nowTime,\r\n");
      out.write("\t        btns: ['clear', 'confirm'],\r\n");
      out.write("\t        done: function(value, date){\r\n");
      out.write("\t            endMax = end.config.max;\r\n");
      out.write("\t            end.config.min = date;\r\n");
      out.write("\t            end.config.min.month = date.month -1;\r\n");
      out.write("\t        }\r\n");
      out.write("\t    });\r\n");
      out.write("\t    var end = laydate.render({\r\n");
      out.write("\t        elem: '#createTimeEnd',\r\n");
      out.write("\t        type: 'datetime',\r\n");
      out.write("\t        max: nowTime,\r\n");
      out.write("\t        done: function(value, date){\r\n");
      out.write("\t            if($.trim(value) == ''){\r\n");
      out.write("\t                var curDate = new Date();\r\n");
      out.write("\t                date = {'date': curDate.getDate(), 'month': curDate.getMonth()+1, 'year': curDate.getFullYear()};\r\n");
      out.write("\t            }\r\n");
      out.write("\t            start.config.max = date;\r\n");
      out.write("\t            start.config.max.month = date.month -1;\r\n");
      out.write("\t        }\r\n");
      out.write("\t    })\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//加载页面数据\r\n");
      out.write("\t\ttable.render({\r\n");
      out.write("\t\t\tid:'logList'\r\n");
      out.write("\t\t    ,elem: '#logList'\r\n");
      out.write("\t\t    ,url: ctx+'/log/getLogList' //数据接口\r\n");
      out.write("\t\t    ,limit:10//每页默认数\r\n");
      out.write("\t\t    ,limits:[10,20,30,40]\r\n");
      out.write("\t\t    ,cols: [[ //表头\r\n");
      out.write("\t\t      {field:'id', title: 'ID',width:70,sort:true}\r\n");
      out.write("\t          ,{field:'operation', title: '操作'}\r\n");
      out.write("\t          ,{field:'method', title: '请求路径'}\r\n");
      out.write("\t          ,{field:'params', title: '请求参数'}\r\n");
      out.write("\t          ,{field:'ip', title: 'ip'}\r\n");
      out.write("\t          ,{field:'username', title: '操作人'}\r\n");
      out.write("\t          ,{field:'createTime', title: '评论时间',sort:true}\r\n");
      out.write("\t\t    ]]\r\n");
      out.write("\t\t\t\t,page: true //开启分页\r\n");
      out.write("\t\t\t\t,where: {timestamp: (new Date()).valueOf()}\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t//查询\r\n");
      out.write("\t \t$(\".search_btn\").click(function(){\r\n");
      out.write("\t\t\tvar type = $(this).data('type');\r\n");
      out.write("\t\t    active[type] ? active[type].call(this) : '';\r\n");
      out.write("\t\t})\r\n");
      out.write("\r\n");
      out.write("\t})\r\n");
      out.write("\r\n");
      out.write("\t//格式化时间\r\n");
      out.write("\tfunction formatTime(datetime,fmt){\r\n");
      out.write("\t\talert(datetime)\r\n");
      out.write("\t\tif(datetime==null||datetime==0){\r\n");
      out.write("\t\t\treturn \"\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (parseInt(datetime)==datetime) {\r\n");
      out.write("\t\t    if (datetime.length==10) {\r\n");
      out.write("\t\t      datetime=parseInt(datetime)*1000;\r\n");
      out.write("\t\t    } else if(datetime.length==13) {\r\n");
      out.write("\t\t      datetime=parseInt(datetime);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t\t  datetime=new Date(datetime);\r\n");
      out.write("\t\t  var o = {\r\n");
      out.write("\t\t  \"M+\" : datetime.getMonth()+1,                 //月份   \r\n");
      out.write("\t\t  \"d+\" : datetime.getDate(),                    //日   \r\n");
      out.write("\t\t  \"h+\" : datetime.getHours(),                   //小时   \r\n");
      out.write("\t\t  \"m+\" : datetime.getMinutes(),                 //分   \r\n");
      out.write("\t\t  \"s+\" : datetime.getSeconds(),                 //秒   \r\n");
      out.write("\t\t  \"q+\" : Math.floor((datetime.getMonth()+3)/3), //季度   \r\n");
      out.write("\t\t  \"S\"  : datetime.getMilliseconds()             //毫秒   \r\n");
      out.write("\t\t  };   \r\n");
      out.write("\t\t  if(/(y+)/.test(fmt))   \r\n");
      out.write("\t\t  fmt=fmt.replace(RegExp.$1, (datetime.getFullYear()+\"\").substr(4 - RegExp.$1.length));   \r\n");
      out.write("\t\t  for(var k in o) \r\n");
      out.write("\t\t  if(new RegExp(\"(\"+ k +\")\").test(fmt))   \r\n");
      out.write("\t\t  fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));   \r\n");
      out.write("\t\t  return fmt;\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/page/include/taglib.jsp(2,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("ctx");
      // /WEB-INF/page/include/taglib.jsp(2,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/page/include/taglib.jsp(2,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
